global *

-- error handling
local clean = true
err = (msg, lvl = 2) -> 
	if clean
		error msg, lvl
		clean = false
	
-- index symbols
kind = {'kind'}

-- type guard helpers
local primitive =
	num: 'number', bol: 'boolean', str: 'string',
	fun: 'function', tbl: 'table', udt: 'userdata'

is =
	<call>: (q, x, t = type(x), p = primitive[q]) =>
		t == p or (t == 'table' and q == x[kind])
	<index>: (q, s = @) => {
		<call>: (x) => s q, x
		<index>: (r) => (x, y) -> s(q, x) and s(r, y)
	}

-- iterators for specific key types
kpair = (tg) -> (t, k) ->
	k, v = next(t, k)
	k, v = next(t, k) while v? and not tg k
	k, v

spairs = (t) -> kpair(is.str), t
wpairs = (t) -> kpair(is.wrd), t

-- string iterators
local str = ''.<index>
str.words = => @\gmatch('%S+')

-- augmented bare words
local word
_G.<index> = (n) => word.create n

word =
	create: (n, k = 'wrd') -> 
		<>: word.<>, [kind]: k, :n, v: true
	<tostring>: => tostring(@n)
	<call>: (w) => @n .. ' ' .. (w.n or w)
	<unm>: =>
		@v = false
		@

-- branded words
brand = (b) -> <index>: (n) => word.create n, b.n or b
